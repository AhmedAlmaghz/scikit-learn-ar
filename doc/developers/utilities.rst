هذه ترجمة النص السابق إلى اللغة العربية:

.. _developers-utils:

========================
الأدوات المساعدة للمطورين
========================

يحتوي Scikit-learn على عدد من الأدوات المساعدة للمساعدة في التطوير. توجد هذه الأدوات في :mod:`sklearn.utils`، وتشمل أدوات في عدد من الفئات.

.. warning ::

   هذه الأدوات المساعدة مخصصة للاستخدام الداخلي داخل حزمة Scikit-learn. لا يتم ضمان استقرارها بين الإصدارات المختلفة من Scikit-learn. سيتم إزالة النسخ الاحتياطية، على وجه الخصوص، مع تطور تبعيات Scikit-learn.


.. currentmodule:: sklearn.utils

أدوات التحقق
============

هذه هي الأدوات المستخدمة للتحقق من صحة الإدخال. عند كتابة دالة تقبل المصفوفات أو المصفوفات النقطية أو المصفوفات النقطية المتفرقة كوسيطات، يجب استخدام ما يلي عند الاقتضاء.

- :func:`assert_all_finite`: إلقاء خطأ إذا احتوت المصفوفة على قيم غير منتهية أو غير معرفة.

- :func:`as_float_array`: تحويل الإدخال إلى مصفوفة من الأرقام العشرية. إذا تم تمرير مصفوفة متفرقة، فسيتم إرجاع مصفوفة متفرقة.

- :func:`check_array`: تحقق من أن الإدخال هو مصفوفة ثنائية الأبعاد، وارفع خطأ على المصفوفات النقطية المتفرقة. يمكن إعطاء تنسيقات المصفوفات النقطية المتفرقة المسموح بها بشكل اختياري، وكذلك السماح بمصفوفات أحادية أو متعددة الأبعاد. يستدعي :func:`assert_all_finite` افتراضيًا.

- :func:`check_X_y`: تحقق من أن X و y لهما طول متسق، ويستدعي check_array على X، و column_or_1d على y. لتصنيف متعدد الملصقات أو الانحدار متعدد الأهداف، حدد multi_output=True، وفي هذه الحالة سيتم استدعاء check_array على y.

- :func:`indexable`: تحقق من أن جميع المصفوفات المدخلة لها طول متسق ويمكن تقطيعها أو فهرستها باستخدام safe_index. يتم استخدامه للتحقق من صحة المدخلات للتحقق المتبادل.

- :func:`validation.check_memory` يتحقق من أن الإدخال يشبه ``joblib.Memory``، مما يعني أنه يمكن تحويله إلى ``sklearn.utils.Memory`` (عادةً ما يكون سلسلة تمثل ``cachedir``) أو له نفس الواجهة.

إذا كان الكود الخاص بك يعتمد على مولد أرقام عشوائية، فلا يجب أبدًا استخدام وظائف مثل ``numpy.random.random`` أو ``numpy.random.normal``. يمكن أن يؤدي هذا النهج إلى مشاكل في التكرار في اختبارات الوحدة. بدلاً من ذلك، يجب استخدام كائن ``numpy.random.RandomState``، والذي يتم بناؤه من وسيطة ``random_state`` التي تم تمريرها إلى الدالة أو الدالة. يمكن بعد ذلك استخدام الدالة :func:`check_random_state`، أدناه، لإنشاء كائن مولد الأرقام العشوائية.

- :func:`check_random_state`: إنشاء كائن ``np.random.RandomState`` من وسيطة ``random_state``.

  - إذا كان ``random_state`` هو ``None`` أو ``np.random``، فسيتم إرجاع كائن ``RandomState`` مُهيأ عشوائيًا.
  - إذا كان ``random_state`` هو رقم صحيح، فسيتم استخدامه لبذرة كائن ``RandomState`` جديد.
  - إذا كان ``random_state`` هو كائن ``RandomState``، فسيتم تمريره.

على سبيل المثال::

    >>> from sklearn.utils import check_random_state
    >>> random_state = 0
    >>> random_state = check_random_state(random_state)
    >>> random_state.rand(4)
    array([0.5488135 , 0.71518937, 0.60276338, 0.54488318])

عند تطوير أداة تقييم متوافقة مع Scikit-learn خاصة بك، تتوفر المساعدات التالية.

- :func:`validation.check_is_fitted`: تحقق من أنه قد تم تركيب أداة التقييم قبل استدعاء ``transform`` أو ``predict`` أو طرق مشابهة. تسمح هذه المساعدة برفع رسالة خطأ موحدة عبر أداة التقييم.

- :func:`validation.has_fit_parameter`: تحقق من دعم وسيطة معينة في طريقة ``fit`` لأداة تقييم معينة.

حساب الخطي الفعال وعمليات المصفوفات
============================

- :func:`extmath.randomized_range_finder`: بناء مصفوفة متعامدة النطاق الذي ي приближает نطاق الإدخال. يستخدم في :func:`extmath.randomized_svd`، أدناه.

- :func:`extmath.randomized_svd`: حساب التوزيع التفاضلي المتقطع العشوائي k. يجد هذا الخوارزمية توزيع التفاضل المتقطع المتقطع الدقيق باستخدام التوزيع العشوائي لتسريع العمليات الحسابية. إنه سريع بشكل خاص على المصفوفات الكبيرة التي ترغب في استخراج عدد صغير فقط من المكونات.

- `arrayfuncs.cholesky_delete`: (يستخدم في :func:`~sklearn.linear_model.lars_path`)  إزالة عنصر من تحليل شولسكي.

- :func:`arrayfuncs.min_pos`: (يستخدم في ``sklearn.linear_model.least_angle``) البحث عن الحد الأدنى من القيم الإيجابية داخل مصفوفة.


- :func:`extmath.fast_logdet`: احسب بكفاءة لوغاريتم المحدد لمصفوفة.

- :func:`extmath.density`: احسب بكفاءة كثافة متجه متفرق

- :func:`extmath.safe_sparse_dot`: حاصل الضرب الذي سيتعامل بشكل صحيح مع مدخلات ``scipy.sparse``. إذا كانت المدخلات كثيفة، فهي معادلة لـ ``numpy.dot``.

- :func:`extmath.weighted_mode`: امتداد لـ ``scipy.stats.mode`` الذي يسمح لكل عنصر بأن يكون له وزن حقيقي.

- :func:`resample`: إعادة أخذ عينات المصفوفات أو المصفوفات المتفرقة بطريقة متسقة. يستخدم في :func:`shuffle`، أدناه.

- :func:`shuffle`: خلط المصفوفات أو المصفوفات المتفرقة بطريقة متسقة. يستخدم في :func:`~sklearn.cluster.k_means`.


أخذ العينات العشوائية الفعالة
========================

- :func:`random.sample_without_replacement`: يطبق خوارزميات فعالة لأخذ عينة `n_samples` أعداد صحيحة من مجموعة سكانية ذات حجم `n_population` دون استبدال.


روتين فعال للمصفوفات النقطية المتفرقة

    

هذا نص بتنسيق RST أريد ترجمته إلى اللغة العربية، مع الحفاظ على الرموز الخاصة والرموز والمعادلات الرياضية والروابط والتاجات والشفرة البرمجية دون ترجمة:

======================================

يستضيف وحدة ``sklearn.utils.sparsefuncs`` cython ملحقات مُترجمة لتتمكن من معالجة بيانات ``scipy.sparse`` بكفاءة.

- :func:`sparsefuncs.mean_variance_axis`: حساب الوسيط والانحراف المعياري على طول محور محدد من مصفوفة CSR. يتم استخدامه لتطبيع معيار التوقف بالتسامح في :class:`~sklearn.cluster.KMeans`.

- :func:`sparsefuncs_fast.inplace_csr_row_normalize_l1` و :func:`sparsefuncs_fast.inplace_csr_row_normalize_l2`: يمكن استخدامهما لتطبيع عينات متفرقة فردية إلى وحدة L1 أو L2 كما يتم في :class:`~sklearn.preprocessing.Normalizer`.

- :func:`sparsefuncs.inplace_csr_column_scale`: يمكن استخدامه لمضاعفة أعمدة مصفوفة CSR بمعامل ثابت (معامل واحد لكل عمود). يتم استخدامه لتعديل الميزات إلى وحدة الانحراف المعياري في :class:`~sklearn.preprocessing.StandardScaler`.

- :func:`~sklearn.neighbors.sort_graph_by_row_values`: يمكن استخدامه لفرز مصفوفة CSR المتفرقة بحيث يتم تخزين كل صف بقيم متزايدة. هذا مفيد لتحسين الكفاءة عند استخدام مصفوفات المسافة المتفرقة المحوسبة مسبقًا في التقديرات التي تعتمد على الرسم البياني للجيران الأقرب.


دوال الرسوم البيانية
==================

- :func:`graph.single_source_shortest_path_length`: (لا تستخدم حاليًا في scikit-learn) إرجاع أقصر مسار من مصدر واحد إلى جميع العقد المتصلة في الرسم البياني. تم تكييف الكود من `networkx <https://networkx.github.io/>`_. إذا كانت هناك حاجة إلى ذلك مرة أخرى، فسيكون من الأسرع استخدام تكرار واحد من خوارزمية Dijkstra من ``graph_shortest_path``.


دوال الاختبار
=================

- :func:`discovery.all_estimators`: تُرجع قائمة بجميع المُقدِّرات في scikit-learn لاختبار السلوك والواجهات المتسقة.

- :func:`discovery.all_displays`: تُرجع قائمة بجميع الشاشات (المتعلقة بواجهة التخطيط) في scikit-learn لاختبار السلوك والواجهات المتسقة.

- :func:`discovery.all_functions`: تُرجع قائمة بجميع الدوال في scikit-learn لاختبار السلوك والواجهات المتسقة.

دوال المنفعة المتعددة الطبقات والمتعددة التسمية
==========================================

- :func:`multiclass.is_multilabel`: دالة مساعدة للتحقق مما إذا كانت المهمة هي تصنيف متعدد التسميات.

- :func:`multiclass.unique_labels`: دالة مساعدة لاستخراج صفيف منظم من التسميات الفريدة من تنسيقات الهدف المختلفة.


دوال المساعدة
================

- :class:`gen_even_slices`: منشئ لإنشاء ``n``-مجموعات من الشرائح التي تصل إلى ``n``. يتم استخدامه في :func:`~sklearn.decomposition.dict_learning` و :func:`~sklearn.cluster.k_means`.

- :class:`gen_batches`: منشئ لإنشاء شرائح تحتوي على عناصر حجم الدُفعة من 0 إلى ``n``

- :func:`safe_mask`: دالة مساعدة لتحويل قناع إلى التنسيق المتوقع بواسطة مصفوفة numpy أو مصفوفة scipy المتفرقة التي يجب استخدامها (المصفوفات المتفرقة تدعم المؤشرات الصحيحة فقط بينما تدعم مصفوفات numpy كلًا من الأقنعة المنطقية والمؤشرات الصحيحة).

- :func:`safe_sqr`: دالة مساعدة للتıbȣİع المتحد (``**2``) للمصفوفات الشبيهة بالمصفوفات والمصفوفات والمصفوفات المتفرقة.


دوال التجزئة
==============

- :func:`murmurhash3_32` يوفر غلاف python لوظيفة التجزئة غير المشفرة ``MurmurHash3_x86_32`` C++. وظيفة التجزئة هذه مناسبة لتنفيذ جداول البحث ومرشحات Bloom و Count Min Sketch وتجزئة الميزات والإسقاطات العشوائية الضمنية المحددة::

    >>> from sklearn.utils import murmurhash3_32
    >>> murmurhash3_32("some feature", seed=0) == -384616559
    True

    >>> murmurhash3_32("some feature", seed=0, positive=True) == 3910350737
    True

  يمكن أيضًا "استيراد" وحدة ``sklearn.utils.murmurhash`` من وحدات cython الأخرى للاستفادة من الأداء العالي لـ MurmurHash مع تخطي عبء المترجم Python.


التحذيرات والاستثناءات
=======================

- :class:`deprecated`: زخرفة لوضع علامة على الدالة أو الفئة على أنها قديمة.

- :class:`~sklearn.exceptions.ConvergenceWarning`: تحذير مخصص للقبض على مشاكل التقارب. يتم استخدامه في ``sklearn.covariance.graphical_lasso``.
