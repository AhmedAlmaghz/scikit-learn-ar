.. _developers-utils:

========================
الأدوات المساعدة للمطورين
========================

يحتوي Scikit-learn على عدد من الأدوات المساعدة لتسهيل التطوير. يمكن العثور على هذه الأدوات في :mod:`sklearn.utils`، وتتضمن أدوات في العديد من الفئات. جميع الوظائف والصفوف التالية موجودة في الوحدة النمطية :mod:`sklearn.utils`.

.. warning::

   القصد من هذه الأدوات المساعدة هو استخدامها داخليًا ضمن حزمة scikit-learn. لا يُضمن توافقها بين إصدارات scikit-learn. سيتم إزالة عمليات إعادة البناء، على وجه الخصوص، مع تطور تبعيات scikit-learn.

.. currentmodule:: sklearn.utils

أدوات التحقق من الصحة
================

هذه هي الأدوات المستخدمة للتحقق من صحة الإدخال. عند كتابة دالة تقبل المصفوفات أو المصفوفات أو المصفوفات النادرة كوسيطات، يجب استخدام ما يلي عند الانطباق.

- :func:`assert_all_finite`: قم برمي خطأ إذا كانت المصفوفة تحتوي على قيم غير محدودة أو لا تحتوي على قيم رقمية (NaN).

- :func:`as_float_array`: تحويل الإدخال إلى مصفوفة من الأرقام العائمة. إذا تم تمرير مصفوفة نادرة، فسيتم إرجاع مصفوفة نادرة.

- :func:`check_array`: التحقق من أن الإدخال هو مصفوفة ثنائية الأبعاد، وإطلاق خطأ في المصفوفات النادرة. يمكن تحديد تنسيقات المصفوفة النادرة المسموح بها بشكل اختياري، وكذلك السماح بمصفوفات أحادية البعد أو متعددة الأبعاد. يستدعي :func:`assert_all_finite` بشكل افتراضي.

- :func:`check_X_y`: التحقق من أن X و y لهما طول متسق، واستدعاء check_array على X، و column_or_1d على y. بالنسبة لتصنيف التسميات المتعددة أو الانحدار متعدد الأهداف، حدد multi_output=True، وفي هذه الحالة سيتم استدعاء check_array على y.

- :func:`indexable`: التحقق من أن جميع المصفوفات المدخلة لها طول متسق ويمكن تقسيمها أو فهرسة باستخدام safe_index. يتم استخدام هذا للتحقق من صحة الإدخال للتحقق من الصحة.

- :func:`validation.check_memory` يتحقق من أن الإدخال هو ``joblib.Memory``-like، مما يعني أنه يمكن تحويله إلى مثيل ``sklearn.utils.Memory`` (عادةً ما يكون سلسلة تحدد ``cachedir``) أو لديه نفس الواجهة.

إذا اعتمد الكود الخاص بك على مولد أرقام عشوائية، فيجب ألا يستخدم أبدًا وظائف مثل ``numpy.random.random`` أو ``numpy.random.normal``. يمكن أن يؤدي هذا النهج إلى مشكلات في قابلية التكرار في اختبارات الوحدة. بدلاً من ذلك، يجب استخدام كائن ``numpy.random.RandomState``، والذي يتم بناؤه من وسيطة ``random_state`` التي يتم تمريرها إلى الفئة أو الدالة. يمكن بعد ذلك استخدام الدالة :func:`check_random_state`، أدناه، لإنشاء كائن مولد رقم عشوائي.

- :func:`check_random_state`: إنشاء كائن ``np.random.RandomState`` من وسيطة ``random_state``.

  - إذا كانت ``random_state`` هي ``None`` أو ``np.random``، فسيتم إرجاع كائن ``RandomState`` الذي تم تهيئته بشكل عشوائي.
  - إذا كانت ``random_state`` عبارة عن عدد صحيح، فسيتم استخدامه لبذر كائن ``RandomState`` جديد.
  - إذا كانت ``random_state`` عبارة عن كائن ``RandomState``، فسيتم تمريره كما هو.

على سبيل المثال::

    >>> from sklearn.utils import check_random_state
    >>> random_state = 0
    >>> random_state = check_random_state(random_state)
    >>> random_state.rand(4)
    array([0.5488135 , 0.71518937, 0.60276338, 0.54488318])

عند تطوير برنامج تقدير متوافق مع scikit-learn الخاص بك، تكون برامج المساعدة التالية متاحة.

- :func:`validation.check_is_fitted`: التحقق من أن المثمن قد تم ضبطه قبل استدعاء ``transform`` أو ``predict`` أو طرق مماثلة. يسمح هذا المساعد برفع رسالة خطأ موحدة عبر المثمن.

- :func:`validation.has_fit_parameter`: التحقق من أن معلمة معينة مدعومة في طريقة "التناسب" لمقدّر معين.

عمليات الجبر الخطي والصفيف الفعالة
===========================================

- :func:`extmath.randomized_range_finder`: إنشاء مصفوفة متعامدة يكون نطاقها تقريبيًا لنطاق الإدخال. يتم استخدام هذا في :func:`extmath.randomized_svd`، أدناه.

- :func:`extmath.randomized_svd`: حساب SVD المعياري المعياري المعياري المعياري. يجد هذا الخوارزمية القيمة الدقيقة للتفرد المعياري المعياري المعياري باستخدام العشوائية لتسريع الحسابات. إنه سريع بشكل خاص في المصفوفات الكبيرة التي ترغب في استخراج عدد قليل فقط من المكونات منها.

- `arrayfuncs.cholesky_delete`:
  (يستخدم في :func:`~sklearn.linear_model.lars_path`) إزالة عنصر من تحليل تشوليسكي.

- :func:`arrayfuncs.min_pos`: (يستخدم في ``sklearn.linear_model.least_angle``)
  البحث عن الحد الأدنى من القيم الإيجابية داخل مصفوفة.

- :func:`extmath.fast_logdet`: حساب سجل محدد مصفوفة بكفاءة.

- :func:`extmath.density`: احسب كثافة متجه نادرة بكفاءة

- :func:`extmath.safe_sparse_dot`: دوت المنتج الذي سيتعامل بشكل صحيح مع الإدخالات النادرة ``scipy.sparse``. إذا كانت الإدخالات كثيفة، فهي مكافئة لـ ``numpy.dot``.

- :func:`extmath.weighted_mode`: امتداد لـ ``scipy.stats.mode`` والذي يسمح لكل عنصر أن يكون له وزن حقيقي.

- :func:`resample`: إعادة أخذ عينات المصفوفات أو المصفوفات النادرة بطريقة متسقة. يستخدم في :func:`shuffle`، أدناه.

- :func:`shuffle`: خلط المصفوفات أو المصفوفات النادرة بطريقة متسقة. يستخدم في :func:`~sklearn.cluster.k_means`.

العينات العشوائية الفعالة
=========================

- :func:`random.sample_without_replacement`: تنفيذ خوارزميات فعالة لأخذ عينات ``n_samples`` من الأعداد الصحيحة من عدد سكان يبلغ عددهم ``n_population`` بدون استبدال.

الروتينات الفعالة للمصفوفات النادرة
======================================

تستضيف وحدة ``sklearn.utils.sparsefuncs`` cython ملحقات مجمعة لمعالجة بيانات ``scipy.sparse`` بكفاءة.

- :func:`sparsefuncs.mean_variance_axis`: حساب المتوسطات والتباينات على طول محور محدد لمصفوفة CSR.
  يستخدم لتطبيع معيار التوقف في
  :class:`~sklearn.cluster.KMeans`.

- :func:`sparsefuncs_fast.inplace_csr_row_normalize_l1` و
  :func:`sparsefuncs_fast.inplace_csr_row_normalize_l2`: يمكن استخدامها لتطبيع عينات نادرة فردية لتطبيع L1 أو L2 كما هو الحال في
  :class:`~sklearn.preprocessing.Normalizer`.

- :func:`sparsefuncs.inplace_csr_column_scale`: يمكن استخدامه لمضاعفة أعمدة مصفوفة CSR بمعامل ثابت (مقياس واحد لكل عمود).
  يستخدم لقياس الميزات إلى انحراف معياري وحدة في
  :class:`~sklearn.preprocessing.StandardScaler`.

- :func:`~sklearn.neighbors.sort_graph_by_row_values`: يمكن استخدامه لفرز مصفوفة نادرة CSR بحيث يتم تخزين كل صف بزيادة القيم. هذا
  مفيد لتحسين الكفاءة عند استخدام المصفوفات النادرة للمسافات المسبقة في المقدرين الذين يعتمدون على رسم بياني لأقرب جار.

روتينات الرسم البياني
==============

- :func:`graph.single_source_shortest_path_length`:
  (لا تستخدم حاليًا في scikit-learn)
  إرجاع أقصر مسار من مصدر واحد
  إلى جميع العقد المتصلة في الرسم البياني. تم تكييف الكود من `networkx
  <https://networkx.github.io/>`_.
  إذا لزم الأمر مرة أخرى، فسيكون من الأسرع بكثير استخدام تكرار واحد من خوارزمية Dijkstra من ``graph_shortest_path``.

وظائف الاختبار
=================

- :func:`discovery.all_estimators` : إرجاع قائمة بجميع المقدرين في
  scikit-learn لاختبار السلوك والواجهات المتسقة.

- :func:`discovery.all_displays` : إرجاع قائمة بجميع العروض (ذات الصلة
  لواجهة برمجة التطبيقات للرسم) في scikit-learn لاختبار السلوك والواجهات المتسقة.

- :func:`discovery.all_functions` : إرجاع قائمة بجميع الوظائف في
  scikit-learn لاختبار السلوك والواجهات المتسقة.

وظيفة المساعدة متعددة التصنيفات والتصنيفات متعددة التصنيفات
==========================================

- :func:`multiclass.is_multilabel`: دالة مساعدة للتحقق مما إذا كانت المهمة
  هي مهمة تصنيف متعددة التصنيفات.

- :func:`multiclass.unique_labels`: دالة مساعدة لاستخراج مصفوفة مرتبة
  من التصنيفات الفريدة من تنسيقات الهدف المختلفة.

وظائف المساعدة
================

- :class:`gen_even_slices`: مولد لإنشاء شرائح "n" من الشرائح التي تصل إلى "n". يستخدم في :func:`~sklearn.decomposition.dict_learning` و
  :func:`~sklearn.cluster.k_means`.

- :class:`gen_batches`: مولد لإنشاء شرائح تحتوي على حجم دفعة من العناصر
  من 0 إلى "n"

- :func:`safe_mask`: دالة مساعدة لتحويل قناع إلى التنسيق المتوقع
  بواسطة مصفوفة Numpy أو مصفوفة scipy نادرة والتي سيتم استخدامها عليها (تدعم المصفوفات النادرة الفهارس الصحيحة فقط بينما تدعم مصفوفات Numpy الأقنعة المنطقية والفهرسة الصحيحة).

- :func:`safe_sqr`: دالة مساعدة للتربيع الموحد (``** 2``) من
  تشبه المصفوفات والمصفوفات والمصفوفات النادرة.

وظائف التجزئة
==============

- :func:`murmurhash3_32` يوفر غلاف Python لـ
  ``MurmurHash3_x86_32`` وظيفة تجزئة C++ غير المشفرة. تعتبر دالة التجزئة هذه مناسبة لتنفيذ جداول البحث وBloom filters
  وCount Min Sketch والتجزئة الميزة والتجزئة العشوائية النادرة المعرفة ضمنيًا::

    >>> from sklearn.utils import murmurhash3_32
    >>> murmurhash3_32("some feature", seed=0) == -384616559
    True

    >>> murmurhash3_32("some feature", seed=0, positive=True) == 3910350737
    True

  يمكن أيضًا "cimport" وحدة ``sklearn.utils.murmurhash`` من
  الوحدات النمطية الأخرى لـ Cython للاستفادة من الأداء العالي لـ
  MurmurHash أثناء تخطي وقت تنفيذ مفسر Python.

التحذيرات والاستثناءات
=======================

- :class:`deprecated`: الديكور لوضع علامة على دالة أو فئة على أنها مهملة.

- :class:`~sklearn.exceptions.ConvergenceWarning`: تحذير مخصص لالتقاط
  مشكلات التقارب. يستخدم في ``sklearn.covariance.graphical_lasso``.