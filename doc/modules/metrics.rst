.. _metrics:

مقاييس الاقتران، الألفة والنواة
========================================

تُنفذ الوحدة الفرعية :mod:`sklearn.metrics.pairwise` أدوات مساعدة لتقييم المسافات المتقارنة أو الألفة لمجموعات من العينات.

تحتوي هذه الوحدة على كل من مقاييس المسافة والنواة. ويرد أدناه ملخص موجز عن الاثنين.

مقاييس المسافة هي دوال "d(a, b)" بحيث أن "d(a, b) < d(a, c)" إذا اعتبرت الكائنات "a" و "b" "أكثر تشابها" من الكائنات "a" و "c". ستكون المسافة بين كائنين متطابقين تمامًا صفرًا.

وأحد أشهر الأمثلة على ذلك هو المسافة الإقليدية.

ولكي يكون "المقياس" حقيقياً، يجب أن يمتثل للشروط الأربعة التالية::

    1. d(a, b) >= 0, لكل من a و b
    2. d(a, b) == 0, إذا وفقط إذا كانت a = b، الإيجابية محدبة
    3. d(a, b) == d(b, a)، التماثل
    4. d(a, c) <= d(a, b) + d(b, c)، عدم المساواة المثلثية

النواة هي مقاييس التشابه، أي "s(a, b) > s(a, c)" إذا اعتبرت الكائنات "a" و "b" "أكثر تشابها" من الكائنات "a" و "c". يجب أن تكون النواة أيضًا موجبة شبه محدبة.

هناك عدد من الطرق للتحويل بين مقياس المسافة ومقياس التشابه، مثل النواة. دع "D" تكون المسافة، و "S" هي النواة:

1. "S = np.exp(-D * gamma)"، حيث إحدى الخوارزميات لاختيار "gamma" هي "1 / num_features"
2. "S = 1. / (D / np.max(D))"


.. currentmodule:: sklearn.metrics

يمكن تقييم المسافات بين المتجهات الصف في "X" والمتجهات الصف في "Y" باستخدام :func:`pairwise_distances`. إذا تم حذف "Y"، يتم حساب المسافات المتقارنة للمتجهات الصف في "X". وبالمثل، يمكن استخدام :func:`pairwise.pairwise_kernels` لحساب النواة بين "X" و "Y" باستخدام دالات نواة مختلفة. راجع مرجع واجهة برمجة التطبيقات لمزيد من التفاصيل.

    >>> import numpy as np
    >>> from sklearn.metrics import pairwise_distances
    >>> from sklearn.metrics.pairwise import pairwise_kernels
    >>> X = np.array([[2, 3], [3, 5], [5, 8]])
    >>> Y = np.array([[1, 0], [2, 1]])
    >>> pairwise_distances(X, Y, metric='manhattan')
    array([[ 4.,  2.],
           [ 7.,  5.],
           [12., 10.]])
    >>> pairwise_distances(X, metric='manhattan')
    array([[0., 3., 8.],
           [3., 0., 5.],
           [8., 5., 0.]])
    >>> pairwise_kernels(X, Y, metric='linear')
    array([[ 2.,  7.],
           [ 3., 11.],
           [ 5., 18.]])


.. currentmodule:: sklearn.metrics.pairwise

.. _cosine_similarity:

تشابه جيب التمام
-----------------
تقوم دالة :func:`cosine_similarity` بحساب جداء النقطة المعيارية L2 للمتجهات.

أي أنه إذا كان "x" و "y" متجهين صف، فإن تشابه جيب التمام "k" بينهما يُعرف على النحو التالي:

.. math::

    k(x, y) = \frac{x y^\top}{\|x\| \|y\|}

تسمى هذه الطريقة بتشابه جيب التمام، لأن التطبيع الأوروبي (L2) يقوم بإسقاط المتجهات على كرة الوحدة،
وجداءها النقطي هو جيب التمام للزاوية بين النقطتين اللتين يمثلهما المتجهان.

تعد هذه النواة خيارًا شائعًا لحساب تشابه المستندات الممثلة كمتجهات tf-idf.

تقبل دالة :func:`cosine_similarity` المصفوفات "scipy.sparse".

(ملاحظة: يمكن أن تنتج وظيفة tf-idf في "sklearn.feature_extraction.text" متجهات معيارية، وفي هذه الحالة تكون دالة :func:`cosine_similarity` مكافئة لـ :func:`linear_kernel`، ولكنها أبطأ فقط.)

.. rubric:: المراجع

* C.D. Manning, P. Raghavan and H. Schütze (2008). Introduction to
  Information Retrieval. Cambridge University Press.
  https://nlp.stanford.edu/IR-book/html/htmledition/the-vector-space-model-for-scoring-1.html

.. _linear_kernel:

النواة الخطية
-------------
تقوم دالة :func:`linear_kernel` بحساب النواة الخطية، أي حالة خاصة من :func:`polynomial_kernel` مع "degree=1" و "coef0=0" (متجانسة).

إذا كان "x" و "y" متجهين عموديين، فإن نواتهما الخطية هي:

.. math::

    k(x, y) = x^\top y

.. _polynomial_kernel:

النواة متعددة الحدود
-----------------
تقوم دالة :func:`polynomial_kernel` بحساب نواة متعددة الحدود ذات الدرجة d بين متجهين.

تمثل النواة متعددة الحدود التشابه بين متجهين.

ومن الناحية النظرية، لا تأخذ النواة متعددة الحدود في الاعتبار التشابه بين المتجهات في نفس البعد فحسب، بل أيضًا عبر الأبعاد.

وعندما تُستخدم في خوارزميات التعلم الآلي، يسمح ذلك بمراعاة تفاعل الخصائص.

تُعرف النواة متعددة الحدود كما يلي:

.. math::

    k(x, y) = (\gamma x^\top y +c_0)^d

حيث:

* "x"، "y" هما المتجهان المدخلان
* "d" هي درجة النواة

إذا كان :math:`c_0 = 0` تُسمى النواة متجانسة.

.. _sigmoid_kernel:

النواة اللوغاريتمية
--------------
تقوم دالة :func:`sigmoid_kernel` بحساب النواة اللوغاريتمية بين متجهين.

تُعرف النواة اللوغاريتمية أيضًا باسم الظل التمثيلي المزدوج، أو الشبكة العصبية متعددة الطبقات (لأنها تُستخدم غالبًا في مجال الشبكات العصبية كدالة تنشيط للخلايا العصبية).

تُعرف كما يلي:

.. math::

    k(x, y) = \tanh( \gamma x^\top y + c_0)

حيث:

* "x"، "y" هما المتجهان المدخلان
* :math:`\gamma` يُعرف باسم الانحدار
* :math:`c_0` يُعرف باسم التقاطع

.. _rbf_kernel:

النواة RBF
----------
تقوم دالة :func:`rbf_kernel` بحساب نواة دالة الأساس الشعاعي (RBF) بين متجهين.

تُعرف هذه النواة كما يلي:

.. math::

    k(x, y) = \exp( -\gamma \| x-y \|^2)

حيث "x" و "y" هما المتجهان المدخلان.

إذا كان :math:`\gamma = \sigma^{-2}`، تُعرف النواة باسم النواة الغاوسية ذات الانحراف المعياري :math:`\sigma^2`.

.. _laplacian_kernel:

نواة لابلاسيان
----------------
دالة :func:`laplacian_kernel` هي متغير لنواة دالة الأساس الشعاعي المحددة كما يلي:

.. math::

    k(x, y) = \exp( -\gamma \| x-y \|_1)

حيث "x" و "y" هما المتجهان المدخلان و :math:`\|x-y\|_1` هي

مسافة مانهاتن بين المتجهات المدخلة.

وقد ثبتت فائدتها في التعلم الآلي المطبق على البيانات الخالية من الضوضاء.

راجع على سبيل المثال `Machine learning for quantum mechanics in a nutshell
<https://onlinelibrary.wiley.com/doi/10.1002/qua.24954/abstract/>`_.

.. _chi2_kernel:

نواة كاي تربيع
------------------
تعد نواة كاي تربيع خيارًا شائعًا جدًا لتدريب SVMs غير الخطية في
تطبيقات الرؤية الحاسوبية.

يمكن حسابها باستخدام :func:`chi2_kernel` ثم تمريرها إلى :class:`~sklearn.svm.SVC` مع "kernel="precomputed""::

    >>> from sklearn.svm import SVC
    >>> from sklearn.metrics.pairwise import chi2_kernel
    >>> X = [[0, 1], [1, 0], [.2, .8], [.7, .3]]
    >>> y = [0, 1, 0, 1]
    >>> K = chi2_kernel(X, gamma=.5)
    >>> K
    array([[1.        , 0.36787944, 0.89483932, 0.58364548],
           [0.36787944, 1.        , 0.51341712, 0.83822343],
           [0.89483932, 0.51341712, 1.        , 0.7768366 ],
           [0.58364548, 0.83822343, 0.7768366 , 1.        ]])

    >>> svm = SVC(kernel='precomputed').fit(K, y)
    >>> svm.predict(K)
    array([0, 1, 0, 1])

يمكن أيضًا استخدامها مباشرة كحجة "kernel"::

    >>> svm = SVC(kernel=chi2_kernel).fit(X, y)
    >>> svm.predict(X)
    array([0, 1, 0, 1])


تُعطى نواة كاي تربيع بالصيغة التالية:

.. math::

        k(x, y) = \exp \left (-\gamma \sum_i \frac{(x[i] - y[i]) ^ 2}{x[i] + y[i]} \right )

يفترض أن تكون البيانات غير سالبة، وغالبا ما يتم تطبيعها لتكون ذات معيار L1 يساوي واحدًا.

ويُبرر التطبيع بالارتباط مع مسافة كاي تربيع،
التي هي مسافة بين توزيعات الاحتمالية المنفصلة.

تُستخدم نواة كاي تربيع في الغالب على الهيستوجرامات (الأكياس) للكلمات المرئية.

.. rubric:: المراجع

* Zhang, J. and Marszalek, M. and Lazebnik, S. and Schmid, C.
  Local features and kernels for classification of texture and object
  categories: A comprehensive study
  International Journal of Computer Vision 2007
  https://hal.archives-ouvertes.fr/hal-00171412/document