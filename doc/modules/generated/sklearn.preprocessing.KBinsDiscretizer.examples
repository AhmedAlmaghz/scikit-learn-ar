

Examples using ``sklearn.preprocessing.KBinsDiscretizer``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. start-sphx-glr-thumbnails


.. raw:: html

    <div class="sphx-glr-thumbnails">

.. thumbnail-parent-div-open

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This example presents the different strategies implemented in KBinsDiscretizer:">

.. only:: html

  .. image:: /auto_examples/preprocessing/images/thumb/sphx_glr_plot_discretization_strategies_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_preprocessing_plot_discretization_strategies.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Demonstrating the different strategies of KBinsDiscretizer</div>
    </div>


.. only:: not html

 * :ref:`sphx_glr_auto_examples_preprocessing_plot_discretization_strategies.py`

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="A demonstration of feature discretization on synthetic classification datasets. Feature discretization decomposes each feature into a set of bins, here equally distributed in width. The discrete values are then one-hot encoded, and given to a linear classifier. This preprocessing enables a non-linear behavior even though the classifier is linear.">

.. only:: html

  .. image:: /auto_examples/preprocessing/images/thumb/sphx_glr_plot_discretization_classification_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_preprocessing_plot_discretization_classification.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Feature discretization</div>
    </div>


.. only:: not html

 * :ref:`sphx_glr_auto_examples_preprocessing_plot_discretization_classification.py`

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="The TargetEncoder replaces each category of a categorical feature with the shrunk mean of the target variable for that category. This method is useful in cases where there is a strong relationship between the categorical feature and the target. To prevent overfitting, TargetEncoder.fit_transform uses an internal cross fitting scheme to encode the training data to be used by a downstream model. This scheme involves splitting the data into k folds and encoding each fold using the encodings learnt using the other k-1 folds. In this example, we demonstrate the importance of the cross fitting procedure to prevent overfitting.">

.. only:: html

  .. image:: /auto_examples/preprocessing/images/thumb/sphx_glr_plot_target_encoder_cross_val_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_preprocessing_plot_target_encoder_cross_val.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Target Encoder's Internal Cross fitting</div>
    </div>


.. only:: not html

 * :ref:`sphx_glr_auto_examples_preprocessing_plot_target_encoder_cross_val.py`

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="The example compares prediction result of linear regression (linear model) and decision tree (tree based model) with and without discretization of real-valued features.">

.. only:: html

  .. image:: /auto_examples/preprocessing/images/thumb/sphx_glr_plot_discretization_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_preprocessing_plot_discretization.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Using KBinsDiscretizer to discretize continuous features</div>
    </div>


.. only:: not html

 * :ref:`sphx_glr_auto_examples_preprocessing_plot_discretization.py`

.. thumbnail-parent-div-close

.. raw:: html

    </div>

