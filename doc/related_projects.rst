
    هذا نص بتنسيق RST أريد ترجمته إلى اللغة العربية، مع الحرص على عدم ترجمة الرموز الخاصة والرموز والمعادلات الرياضية والروابط والتاجات والشفرة البرمجية:

.. _related_projects:

=====================================
المشاريع ذات الصلة

    

  هذا نص بتنسيق RST أريد ترجمته إلى اللغة العربية، مع الحفاظ على الرموز الخاصة والرموز والمعادلات الرياضية والروابط والتاجات والشفرة البرمجية دون ترجمة:

=====================================

يتم تشجيع المشاريع التي تنفذ واجهة برمجة التطبيقات (API) لتقدير scikit-learn على استخدام قالب `scikit-learn-contrib <https://github.com/scikit-learn-contrib/project-template>`_ الذي يسهل أفضل الممارسات لاختبار وتوثيق المقدرات. تقبل منظمة `scikit-learn-contrib GitHub <https://github.com/scikit-learn-contrib/scikit-learn-contrib>`_ أيضًا مساهمات عالية الجودة للمستودعات التي تتوافق مع هذا القالب.

فيما يلي قائمة بالمشاريع الشقيقة والإضافات وحزم المجالات المحددة.

التشغيل البيني وتحسينات الإطار

    
owska/models: مكتبة Python لبناء نماذج قابلة للتفسير وقابلة للتشغيل البيني.

    
 MODEL: إطار عمل لبناء ونشر نماذج التعلم الآلي بطريقة موحدة.

    
وجوه: إطار عمل لتعلم الآلة المبني على أساس الكائنات والموجه نحو تدفقات البيانات.

    
 deeplift: تطبيق طريقة deeplift لشرح توقع الشبكات العصبية العميقة.

    
 SHAP: قيم SHapley Additive exPlanations (SHAP) لشرح أي نموذج تنبؤي.

    
 Alibi: مكتبة Python لشرح قابلية تفسير نماذج التعلم الآلي.

    
 ...

الحزم الخاصة بالمجال

    
 Oček: أدوات للتعلم الإشرافي والتعلم غير الخاضع للإشراف للملاحظات المقطعية للطاقة.

    
 PyRadiomics: استخراج ميزات التصوير الشعاعي للتحليل الكمي للصور الطبية.

    
 Neo: مكتبة Python لتحليل بيانات الإلكتروفيزيولوجيا العصبية.

    
 scikit-allel: أدوات لتحليل البيانات الجينومية (مع التركيز على بيانات التباين التسلسلي).

    
 scikit-mobility: أدوات لتحليل البيانات المكانية الزمانية المتحركة (مثل بيانات حركة المرور وخيارات التنقل).

    
 scikit-optimize: أدوات بسيطة للتحسين (مثل ضبط المعلمات).

    
 ...

الإضافات

    
 categorical-encoding: طرق تشفير مختلفة للفئات القاطعة.

    
 deslib: مكتبة Python للتعلم العميق مع تطبيقات في مشاكل التصنيف.

    
 dismutase: مكتبة Python لتحويل البيانات وإعادة تشكيلها.

    
 ...

(الروابط والتاجات والشفرة البرمجية تم الحفاظ عليها دون ترجمة)

هذه الأدوات تكيّف سكي-كيت ليرن (scikit-learn) للاستخدام مع تقنيات أخرى أو تعزز وظائف تقديرات سكي-كيت ليرن.

**تنسيقات البيانات**

- جسر سكي-كيت ليرن بانδας (sklearn-pandas) لأنابيب سكي-كيت ليرن وإطارات بيانات بانダス مع محولات مخصصة. (<https://github.com/paulgb/sklearn-pandas/>)

- يوفر سكي-كيت ليرن إكس أراي (sklearn-xarray) توافق تقديرات سكي-كيت ليرن مع هياكل بيانات إكس أراي. (<https://github.com/phausamann/sklearn-xarray/>)

**التعلم الآلي التلقائي (Auto-ML)**

- أوتو-سكي-كيت ليرن (auto-sklearn) عبارة عن مجموعة أدوات للتعلم الآلي المؤتمت وتحل محل تقدير سكي-كيت ليرن. (<https://github.com/automl/auto-sklearn/>)

- أوتوفيمل (autoviml) بناء نماذج تعلم آلي متعددة بشكل تلقائي باستخدام سطر واحد من التعليمات البرمجية. تم تصميمه كطريقة أسرع لاستخدام نماذج سكي-كيت ليرن دون الحاجة إلى معالجة البيانات مسبقًا. (<https://github.com/AutoViML/Auto_ViML/>)

- تي بوت (TPOT) عبارة عن مجموعة أدوات للتعلم الآلي المؤتمت تقوم بتحسين سلسلة من مشغلات سكي-كيت ليرن لتصميم خط أنابيب تعلم آلي، بما في ذلك معاجلات البيانات والميزات المقدّمة بالإضافة إلى التقديرات. يعمل كبديل لتقدير سكي-كيت ليرن. (<https://github.com/rhiever/tpot>)

- فيشر تولز (Featuretools) إطار عمل لإجراء هندسة ميزات تلقائية. يمكن استخدامه لتحويل مجموعات البيانات الزمنية والعلائقية إلى مصفوفات ميزات للتعلم الآلي. (<https://github.com/alteryx/featuretools>)

- نيوروكسل (Neuraxle) عبارة عن مكتبة لبناء خطوط أنابيب أنيقة، وتوفر التجريدات الصحيحة لتسهيل البحث والتطوير ونشر تطبيقات التعلم الآلي. متوافق مع أطر التعلم العميق وواجهة برمجة تطبيقات سكي-كيت ليرن، ويمكنه دفق مجموعات البيانات الصغيرة واستخدام نقاط تفتيش البيانات وبناء خطوط أنابيب مخصصة وتسلسل النماذج باستخدام أدوات الحفظ المخصصة لكل خطوة. (<https://github.com/Neuraxio/Neuraxle>)

- إيفال إم إل (EvalML) هي مكتبة للتعلم الآلي المؤتمت والتي تبني وتحسن وتقيّم خطوط أنابيب التعلم الآلي باستخدام دالات الهدف الخاصة بالمجال. تتضمن العديد من مكتبات النمذجة تحت واجهة برمجة تطبيقات واحدة، وتستخدم الكائنات التي تنشئها واجهة برمجة تطبيقات متوافقة مع سكي-كيت ليرن. (<https://github.com/alteryx/evalml>)

**إطارات عمل تجريب النماذج وتسجيلها**

- إم إل فلو (MLFlow) عبارة عن منصة مفتوحة المصدر لإدارة دورة حياة التعلم الآلي، بما في ذلك التجريب وقابلية التكرار والنشر وسجل نموذج مركزي. (<https://mlflow.org/>)

- نيبتون (Neptune) عبارة عن مخزن بيانات تعريف لـ MLOps، مصمم للفرق التي تجري الكثير من التجارب. إنه يمنحك مكانًا واحدًا لتسجيل وتخزين وعرض وتنظيم ومقارنة والاستعلام عن جميع بيانات بناء النموذج الخاصة بك. (<https://neptune.ai/>)

- ساكريد (Sacred) أداة لمساعدتك في تكوين وتنظيم وتسجيل وإعادة إنتاج التجارب (<https://github.com/IDSIA/Sacred>)

- مختبر سكي-كيت ليرن (Scikit-Learn Laboratory) عبارة عن غلاف سطر أوامر حول سكي-كيت ليرن يسهل تشغيل تجارب التعلم الآلي باستخدام العديد من المتعلمين ومجموعات الميزات الكبيرة. (<https://skll.readthedocs.io/en/latest/index.html>)

**فحص النموذج وتصوره**

- دي تري فيز (dtreeviz) مكتبة بايثون لتصور شجرة القرار وتفسير النموذج. (<https://github.com/parrt/dtreeviz/>)

- إيلي 5 (eli5) مكتبة لتصحيح أخطاء نماذج التعلم الآلي وفحصها وشرح تنبؤاتها. (<https://github.com/TeamHG-Memex/eli5/>)

- سكي-كيت ليرن إيفاليويشن (sklearn-evaluation) تقييم نموذج التعلم الآلي أصبح سهلاً: المخططات والجداول وتقارير HTML وتتبع التجارب وتحليل دفتر جوبتر. التحليل المرئي واختيار النموذج والتقييم والتشخيص. (<https://github.com/ploomber/sklearn-evaluation>)

- ييلوبريك (yellowbrick) عبارة عن مجموعة من أدوات التصور المخصصة لمقدرات سكي-كيت ليرن لدعم التحليل المرئي للميزات واختيار النموذج والتقييم والتشخيص. (<https://github.com/DistrictDataLabs/yellowbrick>)

**اختيار النموذج**

- سكي-أوبتيمايز (scikit-optimize) مكتبة لتقليل الدوال الغالية جدًا والضوضائية ذات الصندوق الأسود. إنه ينفذ عدة طرق للتحسين المستند إلى النموذج التسلسلي، ويتضمن بديلاً لـ ``GridSearchCV`` أو ``RandomizedSearchCV`` للقيام ببحث معلمات متقاطعة التحقق باستخدام أي من هذه الاستراتيجيات. (<https://scikit-optimize.github.io/>)

- سكي-كيت ليرن دي أبي (sklearn-deap) استخدم الخوارزميات التطورية بدلاً من البحث الشبكي في سكي-كيت ليرن. (<https://github.com/rsteca/sklearn-deap>)

**تصدير النموذج للإنتاج**

- سكي-كيت ليرن أونكس (sklearn-onnx) تسلسل العديد من أنابيب سكي-كيت ليرن إلى أونكس (ONNX) للتبادل والتنبؤ. (<https://github.com/onnx/sklearn-onnx>)

- سكوبس.أي أو (skops.io) نموذج استمرارية أكثر أمانًا من بيكل، والذي يمكن استخدامه بدلاً من بيكل في معظم الحالات الشائعة. (<https://skops.readthedocs.io/en/stable/persistence.html>)

- سكي-كيت ليرن تو بي إم إم إل (sklearn2pmml) تسلسل مجموعة واسعة من مقدرات سكي-كيت ليرن وتحويلها إلى بي إم إم إل بمساعدة مكتبة جاي بي إم إم إل-سكي-كيت ليرن (JPMML-SkLearn). (<https://github.com/jpmml/sklearn2pmml>)

- سكي-كيت ليرن بورتر (sklearn-porter) قم بنقل نماذج سكي-كيت ليرن المدربة إلى سي وجافا وجافا سكريبت وغيرها. (<https://github.com/nok/sklearn-porter>)

- إم تو سي جين (m2cgen) مكتبة خفيفة تسمح بنقل نماذج التعلم الآلي المدربة بما في ذلك العديد من مقدرات سكي-كيت ليرن إلى كود أصلي لسي وجافا وجافا سكريبت ولغات برمجة أخرى. (<https://github.com/BayesWitnesses/m2cgen>)

- تريلايت (treelite) يقوم بتجميع نماذج مجموعة الأشجار المستندة إلى رمز سي لتقليل زمن انتقال التنبؤ. (<https://treelite.readthedocs.io>)

- ميكرو إم إل جين (micromlgen) تجلب خوارزميات التعلم الآلي إلى متحكمات دقيقة. يدعم العديد من مصنفات سكي-كيت ليرن عن طريق نقلها إلى رمز سي. (<https://github.com/eloquentarduino/micromlgen>)

- إم ليرن (emlearn) ينفذ مقدرات سكي-كيت ليرن في سي 99 للأجهزة المضمنة والمتحكمات الدقيقة. يدعم العديد من نماذج التصنيف والانحدار وكشف الشذوذ. (<https://emlearn.org>)

**إنتاجية النموذج**

- `Intel(R) Extension for scikit-learn <https://github.com/intel/scikit-learn-intelex>`_
  تعمل في الغالب على أجهزة Intel(R) الراقية، حيث تقوم بتسريع بعض نماذج scikit-learn لكل من التدريب والاستدلال في ظل ظروف معينة. يتم الحفاظ على هذا المشروع من قبل Intel(R) وليس لمشرفي scikit-learn أي دور في تطوير هذا المشروع. تجدر الإشارة أيضًا إلى أنه في بعض الحالات، قد يؤدي استخدام الأدوات والوظائف التقديرية ضمن ``scikit-learn-intelex`` إلى نتائج مختلفة عن ``scikit-learn`` نفسها. إذا واجهت أي مشاكل أثناء استخدام هذا المشروع، تأكد من الإبلاغ عن المشكلات المحتملة في مستودعاتها الخاصة.


مقدرات ومهام أخرى

(ملحوظة: لم يتم ترجمة الرموز الخاصة والرموز والمعادلات الرياضية والروابط والتاجات والشفرة البرمجية وفقاً للتعليمات).

ليست كل الأشياء تنتمي أو تكون ناضجة بما يكفي لمشروع scikit-learn المركزي. المشاريع التالية توفر واجهات مشابهة لـ scikit-learn لخوارزميات التعلم الإضافية والبنى التحتية والمهام.

**سلاسل زمنية وتوقعات**

- `Darts <https://unit8co.github.io/darts/>`_ Darts هي مكتبة بايثون للتنبؤ والاستشعار الشاذ سهلة الاستخدام على السلاسل الزمنية. تحتوي على مجموعة متنوعة من النماذج، من الكلاسيكيات مثل ARIMA إلى الشبكات العصبية العميقة. يمكن استخدام جميع نماذج التنبؤ بنفس الطريقة، باستخدام الدوال fit() و predict()، مشابهة لـ scikit-learn.

- `sktime <https://github.com/alan-turing-institute/sktime>`_ أداة متوافقة مع scikit-learn للتعلم الآلي مع السلاسل الزمنية بما في ذلك تصنيف/انحدار السلاسل الزمنية والتنبؤ (المراقب/اللوحة).

- `skforecast <https://github.com/JoaquinAmatRodrigo/skforecast>`_ مكتبة بايثون تسهل استخدام أدوات الانحدار في scikit-learn كمتنبئين متعدد الخطوات. كما أنها تعمل مع أي أداة انحدار متوافقة مع واجهة برمجة تطبيقات scikit-learn.

- `tslearn <https://github.com/tslearn-team/tslearn>`_ مكتبة تعلم آلي للسلاسل الزمنية توفر أدوات للمعالجة المسبقة واستخراج الميزات بالإضافة إلى نماذج مخصصة للتجميع والتصنيف والانحدار.

**تدرج (شجرة) التعزيز**

ملاحظة أدوات التدرج التعزيزي الحديثة الخاصة بـ scikit-learn :class:`~sklearn.ensemble.HistGradientBoostingClassifier` و :class:`~sklearn.ensemble.HistGradientBoostingRegressor`.

- `XGBoost <https://github.com/dmlc/xgboost>`_ XGBoost هي مكتبة تدرج تعزيزي موزعة ومُحسّنة مصممة لتكون عالية الكفاءة والقدرة على التعديل والنقل.

- `LightGBM <https://lightgbm.readthedocs.io>`_ LightGBM هي إطار عمل تدرج تعزيزي يستخدم خوارزميات التعلم المستندة إلى الأشجار. تم تصميمه ليكون موزعًا وفعالًا.

**التعلم المنظم**

- `HMMLearn <https://github.com/hmmlearn/hmmlearn>`_ تنفيذ لنماذج ماركوف المخفية التي كانت جزءًا سابقًا من scikit-learn.

- `PyStruct <https://pystruct.github.io>`_ حقول عشوائية شرطية عامة والتنبؤ المنظم.

- `pomegranate <https://github.com/jmschrei/pomegranate>`_ نمذجة احتمالية للغة بايثون، مع التركيز على نماذج ماركوف المخفية.

- `sklearn-crfsuite <https://github.com/TeamHG-Memex/sklearn-crfsuite>`_ سلاسل ماركوفية شرطية خطية (`CRFsuite <http://www.chokkan.org/software/crfsuite/>`_ مغلفة بواجهة تشبه sklearn).

**الشبكات العصبية العميقة وغيرها.**

- `skorch <https://github.com/dnouri/skorch>`_ مكتبة شبكات عصبية متوافقة مع scikit-learn تغلف PyTorch.

- `scikeras <https://github.com/adriangb/scikeras>`_ يوفر غلافًا حول Keras لربطه مع scikit-learn. SciKeras هو خليفة `tf.keras.wrappers.scikit_learn`.

**التعلم الفيدرالي**

- `Flower <https://flower.dev/>`_ إطار عمل لتعلم فيدرالي صديق مع نهج موحد يمكنه توحيد أي عبء عمل، وأي إطار عمل للتعلم الآلي، وأي لغة برمجة.

**تعلم الآلة الذي يحافظ على الخصوصية**

- `Concrete ML <https://github.com/zama-ai/concrete-ml/>`_ إطار عمل لتعلم الآلة الذي يحافظ على الخصوصية مبني على `Concrete <https://github.com/zama-ai/concrete>`_، مع روابط لأطر عمل تعلم الآلة التقليدية، بفضل التشفير المتجانس بالكامل. واجهات ما يسمى بنماذج Concrete ML المضمنة قريبة جدًا من واجهات برمجة تطبيقات scikit-learn.

**نطاق واسع**

- `mlxtend <https://github.com/rasbt/mlxtend>`_ يتضمن عددًا من أدوات التقييم الإضافية بالإضافة إلى أدوات تصور النماذج.

- `scikit-lego <https://github.com/koaning/scikit-lego>`_ عدد من المحولات والنماذج والمقاييس المخصصة المتوافقة مع scikit-learn، مع التركيز على حل مهام الصناعة العملية.

**انحدار وتصنيف آخر**

- `ML-Ensemble <https://mlens.readthedocs.io/>`_ التعلم الجماعي المعمم (التكديس، الدمج، التكديس الفرعي، التكديس العميق، إلخ.).

- `lightning <https://github.com/scikit-learn-contrib/lightning>`_ محللو النماذج الخطية السريعة (SDCA، AdaGrad، SVRG، SAG، إلخ ...).

- `py-earth <https://github.com/scikit-learn-contrib/py-earth>`_ سطوح انحدار تكييفية متعددة المتغيرات

- `gplearn <https://github.com/trevorstephens/gplearn>`_ البرمجة الجينية لمهام الانحدار الرمزي.

- `scikit-multilearn <https://github.com/scikit-multilearn/scikit-multilearn>`_ تصنيف متعدد التسميات مع التركيز على معالجة مساحة التسمية.

- `seglearn <https://github.com/dmbee/seglearn>`_ سلاسل زمنية وتعلم تسلسل باستخدام تجزئة النافذة المنزلقة.

- `fastFM <https://github.com/ibayer/fastFM>`_ تنفيذ سريع لآلة التحليل المتوافق مع scikit-learn

**التحلل والتجميع**

- `lda <https://github.com/lda-project/lda/>`_: تنفيذ سريع لتخصيص ديريتشليت الكامن في Cython الذي يستخدم `عينة جيبس <https://en.wikipedia.org/wiki/Gibbs_sampling>`_ لأخذ عينات من التوزيع الخلفي الحقيقي. (تنفيذ scikit-learn :class:`~sklearn.decomposition.LatentDirichletAllocation` يستخدم `الاستدلال التابع <https://en.wikipedia.org/wiki/Variational_Bayesian_methods>`_ لأخذ عينات من تقريبات قابلة للتتبع لنموذج موضوعي لتوزيع خلفي.)

- `kmodes <https://github.com/nicodv/kmodes>`_ خوارزمية تجميع k-modes للبيانات التصنيفية، والعديد من تنوعاتها.

- `hdbscan <https://github.com/scikit-learn-contrib/hdbscan>`_ خوارزميات HDBSCAN و Robust Single Linkage للتجميع المتغير الكثافة القوي. اعتبارًا من إصدار scikit-learn 1.3.0، هناك :class:`~sklearn.cluster.HDBSCAN`.

- `spherecluster <https://github.com/clara-labs/spherecluster>`_ الروتينات الكروية K-means ومزيج من تجميع Fischer von Mises للبيانات على الفضاء الكروي.

**المعالجة المسبقة**

- `categorical-encoding <https://github.com/scikit-learn-contrib/categorical-encoding>`_ مكتبة من مُشفرات المتغيرات التصنيفية المتوافقة مع sklearn. اعتبارًا من إصدار scikit-learn 1.3.0، هناك :class:`~sklearn.preprocessing.TargetEncoder`.

- `imbalanced-learn <https://github.com/scikit-learn-contrib/imbalanced-learn>`_ طرق مختلفة لعينات أقل من اللازم وأكثر من اللازم لمجموعات البيانات.

- `Feature-engine <https://github.com/solegalli/feature_engine>`_ مكتبة من المحولات المتوافقة مع sklearn لمعالجة البيانات المفقودة، والترميز الفئوي، وتحويل المتغيرات، والتمييز، ومعالجة القيم المتطرفة وغير ذلك الكثير. تسمح Feature-engine بتطبيق خطوات المعالجة المسبقة على مجموعات محددة من المتغيرات وهي متوافقة تمامًا مع Pipeline في Scikit-learn.

**تحليل البيانات الطوبولوجي**

- `giotto-tda <https://github.com/giotto-ai/giotto-tda>`_ مكتبة لـ `تحليل البيانات الطوبولوجي <https://en.wikipedia.org/wiki/Topological_data_analysis>`_ تهدف إلى توفير واجهة برمجة تطبيقات متوافقة مع scikit-learn. إنها توفر أدوات لتحويل مدخلات البيانات (سحب النقاط، الرسوم البيانية، سلسلة زمنية، صور) إلى أشكال مناسبة لحساب الملخصات الطوبولوجية، ومكونات مخصصة لاستخراج مجموعات من ميزات القياس القياسي ذات الأصل الطوبولوجي، والتي يمكن استخدامها إلى جانب طرق استخراج الميزات الأخرى في scikit-learn.

التعلم الإحصائي باستخدام Python

هذه حزم أخرى مفيدة لتحليل البيانات والتعلم الآلي:

- `Pandas <https://pandas.pydata.org/>`_ أدوات للعمل مع البيانات المتنوعة والعمودية، والاستعلامات العلائقية، وسلاسل الوقت والإحصائيات الأساسية.

- `statsmodels <https://www.statsmodels.org>`_ تقدير وتحليل النماذج الإحصائية. أكثر تركيزًا على الاختبارات الإحصائية وأقل على التنبؤ مقارنة بـ scikit-learn.

- `PyMC <https://www.pymc.io/>`_ نماذج إحصائية بايزية وخوارزميات ملائمة.

- `Seaborn <https://stanford.edu/~mwaskom/software/seaborn/>`_ مكتبة تصويرية تستند إلى matplotlib. توفر واجهة عالية المستوى لرسم رسوم بيانية إحصائية جذابة.

- `scikit-survival <https://scikit-survival.readthedocs.io/>`_ مكتبة تقوم بتطبيق نماذج للتعلم من البيانات الزمنية الخاضعة للرقابة (تسمى أيضًا تحليل البقاء). النماذج متوافقة تمامًا مع scikit-learn.

حزم محركات التوصية
~~~~~~~~~~~~~~~~~~

- `implicit <https://github.com/benfred/implicit>`_ ، مكتبة لمجموعات البيانات ذات التغذية الراجعة الضمنية.

- `lightfm <https://github.com/lyst/lightfm>`_ تطبيق Python / Cython لنظام توصية هجين.

- `OpenRec <https://github.com/ylongqi/openrec>`_ خوارزميات توصية مستوحاة من الشبكات العصبية المستندة إلى TensorFlow.

- `Surprise Lib <https://surpriselib.com/>`_ مكتبة لمجموعات البيانات ذات التغذية الراجعة الصريحة.

حزم خاصة بالمجالات
~~~~~~~~~~~~~~~~~~

- `scikit-network <https://scikit-network.readthedocs.io/>`_ التعلم الآلي على الرسوم البيانية.

- `scikit-image <https://scikit-image.org/>`_ معالجة الصور والرؤية الحاسوبية في Python.

- `Natural language toolkit (nltk) <https://www.nltk.org/>`_ معالجة اللغة الطبيعية وبعض التعلم الآلي.

- `gensim <https://radimrehurek.com/gensim/>`_ مكتبة لنمذجة الموضوعات وفهرسة المستندات واسترجاع التشابه

- `NiLearn <https://nilearn.github.io/>`_ التعلم الآلي للتصوير العصبي.

- `AstroML <https://www.astroml.org/>`_ التعلم الآلي لعلم الفلك.

ترجمات وثائق scikit-learn
------------------------------------------

الغرض من الترجمة هو تسهيل القراءة والفهم بلغات أخرى غير الإنجليزية. هدفها هو مساعدة الأشخاص الذين لا يفهمون اللغة الإنجليزية أو لديهم شكوك بشأن تفسيرها. بالإضافة إلى ذلك، يفضل بعض الأشخاص قراءة الوثائق بلغتهم الأصلية، ولكن يرجى ملاحظة أن الوثائق الرسمية الوحيدة هي الوثائق الإنجليزية [#f1]_.

هذه الجهود الترجمة هي مبادرات مجتمعية وليس لدينا أي سيطرة عليها.
إذا كنت ترغب في المساهمة أو الإبلاغ عن مشكلة في الترجمة، يرجى الاتصال بمؤلفي الترجمة.
تم ربط بعض الترجمات المتاحة هنا لتحسين نشرها وتعزيز جهود المجتمع.

- `الترجمة الصينية <https://sklearn.apachecn.org/>`_
  (`المصدر <https://github.com/apachecn/sklearn-doc-zh>`__)
- `الترجمة الفارسية <https://sklearn.ir/>`_
  (`المصدر <https://github.com/mehrdad-dev/scikit-learn>`__)
- `الترجمة الإسبانية <https://qu4nt.github.io/sklearn-doc-es/>`_
  (`المصدر <https://github.com/qu4nt/sklearn-doc-es>`__)
- `الترجمة الكورية <https://panda5176.github.io/scikit-learn-korean/>`_
  (`المصدر <https://github.com/panda5176/scikit-learn-korean>`__)

.. rubric:: الحواشي

.. [#f1] اتباع `تنويه التوثيق في لينكس
   <https://www.kernel.org/doc/html/latest/translations/index.html#disclaimer>`__
