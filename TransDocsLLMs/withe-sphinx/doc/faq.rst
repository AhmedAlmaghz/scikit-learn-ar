.. raw:: html

  <style>
    /* تنسيق العناوين الفرعية h3 على هذه الصفحة بحيث تبدو مثل العناوين الفرعية */
    h3 {
      font-size: 1rem;
      font-weight: bold;
      padding-bottom: 0.2rem;
      margin: 2rem 0 1.15rem 0;
      border-bottom: 1px solid var(--pst-color-border);
    }

    /* زيادة الهامش العلوي للسؤال الأول في كل قسم */
    h2 + section > h3 {
      margin-top: 2.5rem;
    }

    /* جعل الروابط في العناوين أكثر وضوحًا */
    h3 > a.headerlink {
      font-size: 0.9rem;
    }

    /* إزالة التزيين في الروابط العكسية في العناوين */
    h2 > a.toc-backref,
    h3 > a.toc-backref {
      text-decoration: none;
    }
  </style>

.. _faq:

==========================
الأسئلة الشائعة
هنا نحاول تقديم بعض الإجابات على الأسئلة التي تظهر بانتظام في قائمة البريد الخاصة بنا.

حول المشروع
------------

ما هو اسم المشروع (الكثيرون يخطئون في ذلك)؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
سكيت-ليرن، ولكن ليس سكيت أو ساي-كيت ولا ساي-كيت ليرن.
كما لا يجب أن يُكتب على النحو التالي: سايكيتس.ليرن أو سايكيتس-ليرن، حيث كان يُستخدم هذان الاسمان في السابق.

كيف تنطق اسم المشروع؟
^^^^^^^^^^^^^^^^^^^^^^^
سي-كيت ليرن. ساي تشير إلى العلم!

لماذا سكيت؟
^^^^^^^^^^^^^
هناك العديد من المكتبات التي تعتمد على سايكيت، وهي عبارة عن صناديق أدوات علمية مبنية على مكتبة سايكوب.
باستثناء سكيت-ليرن، هناك مكتبة أخرى شائعة وهي سكيت-إيماج.

هل تدعمون باي باي؟
^^^^^^^^^^^^^^^^^^^^^^^
نظرًا لمحدودية موارد المُصَان والمُطوّرين، وقلة عدد المستخدمين، فإن استخدام
سكيت-ليرن مع باي باي (وهو تنفيذ بديل للغة بايثون مع مترجم مدمج في الوقت المناسب) غير مدعوم رسميًا.

كيف يمكنني الحصول على إذن لاستخدام الصور الموجودة في سكيت-ليرن في عملي؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

يمكن استخدام الصور الموجودة في مستودع سكيت-ليرن
والصور المُنشأة داخل وثائق سكيت-ليرن
بموجب ترخيص BSD المكون من 3 بنود
لعملك. يُشجع بشدة على الاستشهاد بمكتبة سكيت-ليرن. راجع
:ref: الاستشهاد بمكتبة سكيت-ليرن <citing-scikit-learn>.

قرارات التنفيذ
----------------

لماذا لا يوجد دعم للتعلم العميق أو التعلم التعزيزي؟ هل سيكون هناك دعم لمثل هذه الحالات في المستقبل؟

كيف يمكنني المساهمة في سكيت-ليرن؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
راجع القسم :ref: 'contributing' . قبل الرغبة في إضافة خوارزمية جديدة، والتي
عادة ما تكون مهمة كبيرة وطويلة الأمد، يوصى بالبدء مع :ref: 'known issues
<new_contributors>' . يرجى عدم الاتصال بمساهمي سكيت-ليرن مباشرة فيما يتعلق بالمساهمة في
سكيت-ليرن.

لماذا لا يحصل طلب السحب الخاص بي على أي اهتمام؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

تستغرق عملية مراجعة سكيت-ليرن وقتًا طويلاً، ولا يجب أن يشعر المساهمون بالإحباط بسبب
عدم وجود نشاط أو مراجعة لطلب السحب الخاص بهم. نهتم كثيرًا بالقيام بالأمور بشكل صحيح
من المرة الأولى، حيث أن الصيانة والتغيير لاحقًا يأتيان بتكلفة عالية.
نحن نادرًا ما نقوم بإصدار أي تعليمات برمجية "تجريبية"، لذلك ستكون جميع مساهماتنا
خاضعة للاستخدام المكثف على الفور ويجب أن تكون ذات أعلى جودة ممكنة في البداية.

وبعيداً عن ذلك، فإن سكيت-ليرن محدود في نطاق مراجعته؛ حيث يعمل العديد من المراجعين
والمطورين الأساسيين على سكيت-ليرن في أوقات فراغهم. إذا جاءت مراجعة طلب السحب الخاص بك
ببطء، فمن المحتمل أن يكون المراجعون مشغولين. نطلب تفهمك ونتمنى ألا تغلق طلب السحب
الخاص بك أو توقف عملك لهذا السبب فقط.

.. _new_algorithms_inclusion_criteria:

ما هي معايير الإدراج للخوارزميات الجديدة؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

نحن لا نأخذ في الاعتبار سوى الخوارزميات الراسخة جيدًا لإدراجها. كقاعدة عامة، يجب أن
يكون قد مر على نشرها 3 سنوات على الأقل، وأن يكون لها 200+ استشهاد، وأن تكون مستخدمة
على نطاق واسع ومفيدة. كما سيتم النظر في التقنية التي توفر تحسنًا واضحًا (مثل هيكل
بيانات محسّن أو تقنية تقريبية أكثر كفاءة) لطريقة مستخدمة على نطاق واسع لإدراجها.

من بين الخوارزميات أو التقنيات التي تفي بالمعايير المذكورة أعلاه، لا يتم قبول سوى
تلك التي تتوافق جيدًا مع واجهة برمجة التطبيقات الحالية لـسكيت-ليرن، أي واجهة "fit"،
"predict/transform" وعادة ما يكون لها إدخال/إخراج مصفوفة نومبي أو مصفوفة متفرقة.

يجب على المساهم دعم أهمية الإضافة المقترحة بأوراق بحثية و/أو تطبيقات في حزم أخرى
مماثلة، وإظهار فائدتها من خلال حالات الاستخدام/التطبيقات الشائعة وتأكيد تحسينات
الأداء، إن وجدت، باستخدام معايير القياس و/أو الرسوم البيانية. من المتوقع أن تتفوق
الخوارزمية المقترحة على الطرق التي تم تنفيذها بالفعل في سكيت-ليرن على الأقل في بعض
المجالات.

من الأسهل إدراج خوارزمية جديدة لتسريع نموذج موجود إذا:

- لا تقدم أي فرط معلمات جديدة (حيث تجعل المكتبة أكثر مقاومة للمستقبل)،
- من السهل توثيقها بوضوح عندما يحسن المساهمة السرعة وعندما لا تفعل ذلك، على سبيل
  المثال، "عندما ``n_features >> n_samples``"،
- تعرض المعايير المرجعية بوضوح تسريعًا.

كما يرجى ملاحظة أن تنفيذك لا يحتاج إلى أن يكون في سكيت-ليرن لاستخدامه مع أدوات
سكيت-ليرن. يمكنك تنفيذ خوارزميتك المفضلة بطريقة متوافقة مع سكيت-ليرن، وتحميلها على
جيثب وإعلامنا بذلك. سنكون سعداء بإدراجها تحت :ref: 'related_projects' . إذا كان
لديك بالفعل حزمة على جيثب تتبع واجهة برمجة تطبيقات سكيت-ليرن، فقد تكون مهتمًا أيضًا
بالاطلاع على `سكيت-ليرن-كونتريب <https://scikit-learn-contrib.github.io>`_.

.. _selectiveness:

لماذا أنت انتقائي للغاية بشأن الخوارزميات التي تدرجها في سكيت-ليرن؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
يأتي الكود بتكلفة صيانة، ويجب أن نوازن بين كمية الكود الذي لدينا مع حجم الفريق (أضف
إلى ذلك حقيقة أن التعقيد يتزايد بشكل غير خطي مع عدد الميزات).
تعتمد الحزمة على المطورين الأساسيين الذين يستخدمون وقتهم الحر لإصلاح الأخطاء،
وصيانة الكود ومراجعة المساهمات.
تحتاج أي خوارزمية مضافة إلى الاهتمام في المستقبل من قبل المطورين، وفي هذه المرحلة،
قد يكون المؤلف الأصلي قد فقد الاهتمام منذ فترة طويلة.
راجع أيضًا :ref: 'new_algorithms_inclusion_criteria' . لمزيد من القراءة الرائعة حول
مشكلات الصيانة طويلة الأجل في البرمجيات مفتوحة المصدر، راجع "الملخص التنفيذي
للطرق والجسور <https://www.fordfoundation.org/media/2976/roads-and-bridges-the-unseen-
labor-behind-our-digital-infrastructure.pdf#page=8>`_".

استخدام سكيت-ليرن
ما أفضل طريقة للحصول على مساعدة بشأن استخدام scikit-learn؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* أسئلة عامة حول التعلم الآلي: استخدم `Cross Validated <https://stats.stackexchange.com/>`_ مع علامة ``[machine-learning]``.

* أسئلة حول استخدام scikit-learn: استخدم `Stack Overflow <https://stackoverflow.com/questions/tagged/scikit-learn>`_ مع علامتي ``[scikit-learn]`` و ``[python]``. يمكنك أيضًا استخدام `قائمة البريد الإلكتروني <https://mail.python.org/mailman/listinfo/scikit-learn>`_.

يرجى التأكد من تضمين مقتطف من التعليمات البرمجية القابلة للتكرار (يفضل أن يكون أقصر من 10 أسطر) والذي يسلط الضوء على مشكلتك على مجموعة بيانات تجريبية (على سبيل المثال، من :mod:`sklearn.datasets` أو التي تم إنشاؤها بشكل عشوائي باستخدام وظائف ``numpy.random`` مع بذرة عشوائية ثابتة). يرجى إزالة أي سطر من التعليمات البرمجية غير ضروري لتكرار مشكلتك.

يجب أن تكون المشكلة قابلة للتكرار عن طريق نسخ ولصق مقتطف التعليمات البرمجية الخاص بك في بيئة Python مع تثبيت scikit-learn. لا تنس تضمين عبارات الاستيراد. يمكن العثور على مزيد من الإرشادات حول كتابة مقتطفات التعليمات البرمجية القابلة للتكرار في: https://stackoverflow.com/help/mcve.

إذا تسببت مشكلتك في حدوث استثناء لا تفهمه (حتى بعد البحث عنه في Google)، يرجى التأكد من تضمين تتبع الاستثناء الكامل الذي تحصل عليه عند تشغيل برنامج التكرار.

بالنسبة لتقارير الأخطاء أو طلبات الميزات، يرجى استخدام `تتبع المشكلات على GitHub <https://github.com/scikit-learn/scikit-learn/issues>`_.

.. warning::
  يرجى عدم إرسال بريد إلكتروني إلى أي من المؤلفين مباشرة لطلب المساعدة أو الإبلاغ عن الأخطاء أو لأي مشكلة أخرى تتعلق بـ scikit-learn.

كيف يمكنني حفظ أو تصدير أو نشر النماذج للاستخدام في الإنتاج؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

راجع :ref:`model_persistence`.

كيف يمكنني إنشاء كائن Bunch؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

تُستخدم كائنات Bunch أحيانًا كإخراج لوظائف وأساليب. فهي تمد القواميس عن طريق تمكين الوصول إلى القيم إما بواسطة المفتاح، ``bunch["value_key"]``، أو بواسطة الخاصية، ``bunch.value_key``.

لا يجب استخدامها كإدخال. لذلك، أنت لست بحاجة إلى إنشاء كائن :class:`~utils.Bunch`، إلا إذا كنت تقوم بتوسيع واجهة برمجة تطبيقات scikit-learn.

كيف يمكنني تحميل مجموعات البيانات الخاصة بي بتنسيق يمكن لـ scikit-learn استخدامه؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

بشكل عام، يعمل scikit-learn على أي بيانات رقمية مخزنة كمصفوفات Numpy أو مصفوفات scipy متفرقة. كما يتم قبول الأنواع الأخرى القابلة للتحويل إلى مصفوفات رقمية مثل :class:`pandas.DataFrame`.

لمزيد من المعلومات حول تحميل ملفات البيانات الخاصة بك إلى هذه البنى البيانات القابلة للاستخدام، يرجى الرجوع إلى :ref:`تحميل مجموعات البيانات الخارجية <external_datasets>`.

كيف أتعامل مع البيانات النصية (أو الأشجار، أو الرسوم البيانية...)؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

يفترض مُقدِّرو scikit-learn أنك ستزودهم بمتجهات ميزات ذات قيم حقيقية. وهذا الافتراض مُدمج في معظم المكتبة. ومع ذلك، يمكنك إدخال مدخلات غير رقمية إلى المُقدِّرات بعدة طرق.

إذا كانت لديك وثائق نصية، فيمكنك استخدام ميزات تكرار المصطلحات؛ راجع :ref:`text_feature_extraction` لمُرشِّحات *النص* المضمنة. للحصول على استخراج ميزات أكثر عمومية من أي نوع من البيانات، راجع :ref:`dict_feature_extraction` و :ref:`feature_hashing`.

وتتمثل الحالة الشائعة الأخرى في وجود بيانات غير رقمية ومقاييس مخصصة للمسافة (أو التشابه) على هذه البيانات. ومن الأمثلة على ذلك السلاسل النصية مع مسافة التحرير (المعروفة أيضًا باسم مسافة ليفينشتاين)، على سبيل المثال، تسلسلات الحمض النووي الريبي منقوص الأكسجين أو الحمض النووي الريبي. يمكن ترميز هذه البيانات كأرقام، ولكن القيام بذلك أمر مؤلم وعرضة للأخطاء. يمكن العمل مع مقاييس المسافة على البيانات التعسفية بطريقتين.

أولاً، يأخذ العديد من المُقدِّرات مصفوفات المسافة/التشابه المحسوبة مسبقًا، لذا إذا لم تكن مجموعة البيانات كبيرة جدًا، فيمكنك حساب المسافات لجميع أزواج المدخلات. إذا كانت مجموعة البيانات كبيرة، فيمكنك استخدام متجهات الميزات التي تحتوي على ميزة واحدة فقط، والتي تعد فهرسًا لهيكل بيانات منفصل، وتوفير دالة مقياس مخصصة تقوم بالبحث عن البيانات الفعلية في هيكل البيانات هذا. على سبيل المثال، لاستخدام :class:`~cluster.dbscan` مع مسافات ليفينشتاين::

    >>> import numpy as np
    >>> from leven import levenshtein  # doctest: +SKIP
    >>> from sklearn.cluster import dbscan
    >>> data = ["ACCTCCTAGAAG", "ACCTACTAGAAGTT", "GAATATTAGGCCGA"]
    >>> def lev_metric(x, y):
    ...     i, j = int(x[0]), int(y[0])  # استخراج الفهارس
    ...     return levenshtein(data[i], data[j])
    ...
    >>> X = np.arange(len(data)).reshape(-1, 1)
    >>> X
    array([[0],
           [1],
           [2]])
    >>> # نحتاج إلى تحديد algorithm='brute' لأن الافتراضي يفترض
    >>> # فضاء الميزات المستمر.
    >>> dbscan(X, metric=lev_metric, eps=5, min_samples=2, algorithm='brute')  # doctest: +SKIP
    (array([0, 1]), array([ 0,  0, -1]))

لاحظ أن المثال أعلاه يستخدم حزمة مسافة التحرير التابعة لجهة خارجية `leven <https://pypi.org/project/leven/>`_. يمكن استخدام خدع مماثلة، مع بعض الحذر، لنوى الأشجار، ونوى الرسوم البيانية، وما إلى ذلك.

لماذا تحدث أحيانًا تعطل/توقف عند استخدام ``n_jobs > 1`` تحت OSX أو Linux؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

تعتمد العديد من أدوات scikit-learn مثل :class:`~model_selection.GridSearchCV` و :class:`~model_selection.cross_val_score` داخليًا على وحدة :mod:`multiprocessing` في Python لتوازي التنفيذ
إلى عدة عمليات Python عن طريق تمرير ``n_jobs > 1`` كحجة.

المشكلة هي أن :mod:`multiprocessing` في Python يقوم بمكالمة نظام ``fork`` دون متابعتها بمكالمة نظام ``exec`` لأسباب تتعلق بالأداء. وتقوم العديد من المكتبات مثل (بعض إصدارات) Accelerate أو vecLib في OSX، و(بعض إصدارات) MKL، ووقت تشغيل OpenMP لـ GCC، وcuda من Nvidia (وربما العديد من المكتبات الأخرى)، بإدارة بركة الخيوط الخاصة بها. بعد استدعاء ``fork``، يتم تلف حالة بركة الخيوط في عملية الطفل: تعتقد بركة الخيوط أنها تمتلك العديد من الخيوط في حين أن حالة الخيط الرئيسي فقط قد تم نسخها بواسطة ``fork``. من الممكن تغيير المكتبات للكشف عن حدوث عملية ``fork`` وإعادة تهيئة بركة الخيوط في هذه الحالة: لقد فعلنا ذلك لـ OpenBLAS (دمج في المنبع الرئيسي منذ 0.2.10) وقمنا بالمساهمة `رقعة <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60035>`_ لوقت تشغيل OpenMP لـ GCC (لم تتم مراجعتها بعد).

ولكن في النهاية، فإن الجاني الحقيقي هو :mod:`multiprocessing` في Python الذي يقوم بـ ``fork`` دون ``exec`` لتقليل وقت بدء تشغيل عمليات Python الجديدة واستخدامها للحوسبة المتوازية. لسوء الحظ، هذا انتهاك لمعيار POSIX، وبالتالي يرفض بعض مطورو البرامج، مثل Apple، اعتبار عدم أمان عملية ``fork`` في Accelerate وvecLib كخطأ.

في Python 3.4+، أصبح من الممكن الآن تكوين :mod:`multiprocessing` لاستخدام أساليب البدء ``"forkserver"`` أو ``"spawn"`` (بدلاً من الافتراضي ``"fork"``) لإدارة برك العمليات. للالتفاف حول هذه المشكلة عند استخدام scikit-learn، يمكنك تعيين متغير البيئة ``JOBLIB_START_METHOD`` إلى ``"forkserver"``. ومع ذلك، يجب أن يكون المستخدم على دراية بأن استخدام أسلوب ``"forkserver"`` يمنع :class:`joblib.Parallel` من استدعاء الدوال المحددة تفاعليًا في جلسة shell.

إذا كان لديك رمز مخصص يستخدم :mod:`multiprocessing` مباشرة بدلاً من استخدامه عبر :mod:`joblib`، فيمكنك تمكين وضع ``"forkserver"`` عالميًا لبرنامجك. أضف التعليمات التالية إلى النص البرمجي الرئيسي::

    import multiprocessing

    # استيرادات أخرى، رمز مخصص، تحميل البيانات، تعريف النموذج...

    if __name__ == "__main__":
        multiprocessing.set_start_method("forkserver")

        # استدعاء وظائف scikit-learn مع n_jobs > 1 هنا

يمكنك العثور على مزيد من الافتراضيات حول أساليب البدء الجديدة في `توثيق multiprocessing <https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods>`_.

.. _faq_mkl_threading:

لماذا تستخدم وظيفتي المزيد من الأنوية مما هو محدد بواسطة ``n_jobs``؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

يرجع ذلك إلى أن ``n_jobs`` يتحكم فقط في عدد الوظائف للروتينات الموازية باستخدام :mod:`joblib`، ولكن يمكن أن يأتي الكود الموازي من مصادر أخرى:

- قد تكون بعض الروتينات موازية باستخدام OpenMP (للرمز المكتوب في C أو Cython)،
- يعتمد scikit-learn بشكل كبير على numpy، والذي بدوره قد يعتمد على المكتبات العددية مثل MKL أو OpenBLAS أو BLIS والتي يمكن أن توفر تنفيذات متوازية.

لمزيد من التفاصيل، يرجى الرجوع إلى :ref:`ملاحظاتنا حول التوازي <parallelism>`.

كيف يمكنني تعيين ``random_state`` لتنفيذ كامل؟
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

يرجى الرجوع إلى :ref:`randomness`.